"""
Django settings for shopping_site project.

Generated by 'django-admin startproject' using Django 5.1.3.

For more information on this file, see
https://docs.djangoproject.com/en/5.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.1/ref/settings/
"""

from enum import Enum
from pathlib import Path
import os
import glob
from typing import List
from dotenv import load_dotenv
from datetime import date, timedelta
from shopping_site.infrastructure.logger.models import AttributeLogger
from shopping_site.infrastructure.logger.services import (
    CounterLogFormatter,
    CustomizedJSONFormatter,
)
from logging_utilities.formatters.extra_formatter import ExtraFormatter
import logging.config
from typing import Dict, Any

load_dotenv()

SECRET_KEY_TOKEN = os.getenv("SECRET_KEY_TOKEN")
ALGORITHM = os.getenv("ALGORITHM")
SITE_URL = os.getenv("SITE_URL")

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


interface_templates_dir = os.path.join(BASE_DIR, "shopping_site", "interface")
template_dirs = glob.glob(
    os.path.join(interface_templates_dir, "**", "templates"), recursive=True
)

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!

SECRET_KEY = "django-insecure-7e-^$ydu##sdoju#3_pgxuj!zevw6y31nt*v750^4x_)m6luyt"

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = bool(int(os.getenv("DEBUG", 0)))

DEBUG = True
ALLOWED_HOSTS = ['*']


# Application definition

SYSTEM_APPS = [
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",
]

USER_APPS = [
    "shopping_site.domain.authentication",
    "shopping_site.domain.cart_item",
    "shopping_site.domain.order",
    "shopping_site.domain.product",
]

THIRD_PARTY_APPS = [
    "rest_framework",
    "drf_yasg",
    "widget_tweaks",
    'debug_toolbar',
    'fontawesomefree'
]

INSTALLED_APPS = SYSTEM_APPS + USER_APPS + THIRD_PARTY_APPS


MIDDLEWARE = [
    "django.middleware.security.SecurityMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
    'shopping_site.infrastructure.middleware.SqlLoggerMiddleware',
    'debug_toolbar.middleware.DebugToolbarMiddleware',
]
# if DEBUG:
#     MIDDLEWARE.append('shopping_site.infrastructure.middleware.SqlLoggerMiddleware')


# Add Debug Toolbar configuration
DEBUG_TOOLBAR_CONFIG = {
    'SHOW_TOOLBAR_CALLBACK': lambda request: DEBUG,
}

# Only show the debug toolbar when DEBUG is True
if DEBUG:
    INTERNAL_IPS = [
        '127.0.0.1',
    ]


ROOT_URLCONF = "shopping_site.urls"

SITE_URL = 'http://localhost:8000'  # Replace with your actual domain

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [BASE_DIR, *template_dirs],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.debug",
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
            ],
        },
    },
]

WSGI_APPLICATION = "shopping_site.drivers.wsgi.application"


# Database
# https://docs.djangoproject.com/en/5.1/ref/settings/#databases

DATABASES = {
    "default": {
        "ENGINE": "django.db.backends.postgresql",
        "NAME": os.getenv("DB_NAME"),
        "USER": os.getenv("DB_USER"),
        "PASSWORD": os.getenv("DB_PASSWORD"),
        "HOST": os.getenv("DB_HOST"),
        "PORT": os.getenv("DB_PORT"),
    }
}

AUTH_USER_MODEL = "authentication.User"
# Password validation
# https://docs.djangoproject.com/en/5.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.CommonPasswordValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.NumericPasswordValidator",
    },
]

# Internationalization
# https://docs.djangoproject.com/en/5.1/topics/i18n/

LANGUAGE_CODE = "en-us"

TIME_ZONE = "UTC"

USE_I18N = True

USE_TZ = True

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.1/howto/static-files/

STATIC_URL = "static/"



MEDIA_ROOT = os.path.join(BASE_DIR, 'shopping_site', 'interface', 'product', )

# The base URL to serve media files
MEDIA_URL = '/media/'



# Default primary key field type
# https://docs.djangoproject.com/en/5.1/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"

EMAIL_BACKEND = os.getenv("EMAIL_BACKEND")
EMAIL_HOST = os.getenv("EMAIL_HOST")
EMAIL_PORT = os.getenv("EMAIL_PORT")
EMAIL_USE_TLS = os.getenv("EMAIL_USE_TLS")
EMAIL_HOST_USER = os.getenv("EMAIL_HOST_USER")
EMAIL_HOST_PASSWORD = os.getenv("EMAIL_HOST_PASSWORD")


from shopping_site.infrastructure.logger.services import LoggingService, Module

logging_service = LoggingService(modules=Module, log_levels=["debug", "info", "warning", "error"])


LOGGING = logging_service.get_logging_config()


logging.config.dictConfig(LOGGING)
logger = logging.getLogger('dasdsd') 

log = AttributeLogger(logger)

# # Example of adding a runtime log file
# def add_runtime_log(module: str, level: str):
#     logging_service.add_runtime_log_file(module, level)

# # Add a runtime log for a specific module and level
# add_runtime_log('cart_item', 'info')
