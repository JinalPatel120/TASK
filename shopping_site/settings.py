"""
Django settings for shopping_site project.

Generated by 'django-admin startproject' using Django 5.1.3.

For more information on this file, see
https://docs.djangoproject.com/en/5.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.1/ref/settings/
"""

from enum import Enum
from pathlib import Path
import os
import glob
from typing import List
from dotenv import load_dotenv
from datetime import date, timedelta
from shopping_site.infrastructure.logger.models import AttributeLogger
from shopping_site.infrastructure.logger.services import (
    CounterLogFormatter,
    CustomizedJSONFormatter,
)
from logging_utilities.formatters.extra_formatter import ExtraFormatter
import logging.config

load_dotenv()


# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent
interface_templates_dir = os.path.join(BASE_DIR, "shopping_site", "interface")
template_dirs = glob.glob(
    os.path.join(interface_templates_dir, "**", "templates"), recursive=True
)

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!

SECRET_KEY = "django-insecure-7e-^$ydu##sdoju#3_pgxuj!zevw6y31nt*v750^4x_)m6luyt"

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = bool(int(os.getenv("DEBUG", 0)))

DEBUG = True
ALLOWED_HOSTS = os.getenv("ALLOWED_HOSTS").split(",")

# Application definition

SYSTEM_APPS = [
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",
]

USER_APPS = [
    "shopping_site.domain.authentication",
    "shopping_site.domain.cart_item",
    "shopping_site.domain.order",
    "shopping_site.domain.product",
]

THIRD_PARTY_APPS = [
    "rest_framework",
    "drf_yasg",
    "widget_tweaks",
]

INSTALLED_APPS = SYSTEM_APPS + USER_APPS + THIRD_PARTY_APPS


MIDDLEWARE = [
    "django.middleware.security.SecurityMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
]
# if DEBUG:
#     MIDDLEWARE.append('shopping_site.infrastructure.middleware.SqlLoggerMiddleware')


ROOT_URLCONF = "shopping_site.urls"

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [BASE_DIR, *template_dirs],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.debug",
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
            ],
        },
    },
]

WSGI_APPLICATION = "shopping_site.drivers.wsgi.application"


# Database
# https://docs.djangoproject.com/en/5.1/ref/settings/#databases

DATABASES = {
    "default": {
        "ENGINE": "django.db.backends.postgresql",
        "NAME": os.getenv("DB_NAME"),
        "USER": os.getenv("DB_USER"),
        "PASSWORD": os.getenv("DB_PASSWORD"),
        "HOST": os.getenv("DB_HOST"),
        "PORT": os.getenv("DB_PORT"),
    }
}

AUTH_USER_MODEL = "authentication.User"
# Password validation
# https://docs.djangoproject.com/en/5.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.CommonPasswordValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.NumericPasswordValidator",
    },
]

# Internationalization
# https://docs.djangoproject.com/en/5.1/topics/i18n/

LANGUAGE_CODE = "en-us"

TIME_ZONE = "UTC"

USE_I18N = True

USE_TZ = True

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.1/howto/static-files/

STATIC_URL = "static/"

# Default primary key field type
# https://docs.djangoproject.com/en/5.1/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"

EMAIL_BACKEND = os.getenv("EMAIL_BACKEND")
EMAIL_HOST = os.getenv("EMAIL_HOST")
EMAIL_PORT = os.getenv("EMAIL_PORT")
EMAIL_USE_TLS = os.getenv("EMAIL_USE_TLS")
EMAIL_HOST_USER = os.getenv("EMAIL_HOST_USER")
EMAIL_HOST_PASSWORD = os.getenv("EMAIL_HOST_PASSWORD")


<<<<<<< Updated upstream
# LOGGING = {
#     'version': 1,
#     'disable_existing_loggers': False,
#     'formatters': {
#         'standard': {
#             'format': '%(asctime)s - %(name)s - %(levelname)s - %(message)s',
#         },
#     },
#     'handlers': {
#         'file': {
#             'level': 'DEBUG',
#             'class': 'logging.FileHandler',
#             'filename': os.path.join(BASE_DIR, 'django_app.log'),
#             'formatter': 'standard',
#         },
#         'console': {
#             'level': 'INFO',
#             'class': 'logging.StreamHandler',
#             'formatter': 'standard',
#         },
#     },
#     'loggers': {
#         'django': {
#             'handlers': ['console', 'file'],
#             'level': 'INFO',
#             'propagate': True,
#         },
#         'shopping_site': {
#             'handlers': ['console', 'file'],
#             'level': 'INFO',
#             'propagate': False,
#         },
#     },
# }


from datetime import date, timedelta

log_base_dir = "logs"

# Define the subdirectories where logs will be stored
log_subdirs = ["debug", "info", "warning", "error", "db_query"]

# Create the log directories if they don't exist
for subdir in log_subdirs:
    log_path = os.path.join(log_base_dir, subdir)
    os.makedirs(log_path, exist_ok=True)
=======
>>>>>>> Stashed changes



import os
from enum import Enum
from datetime import date






class Module(Enum):
    USER = "user"
    PRODUCT = "product"
    ORDER = "order"  # Example additional module



class LoggingService:
    def __init__(self, modules: Enum,log_levels:List[str]):
        """
        Initializes the LoggingService with the given module enum.
        :param module_enum: The enum class representing the modules for which logging should be created.
        """
        self.log_levels =log_levels
        self.module_enum = modules
        self.handlers = {}
        self.loggers = {}
        self.create_log_directories()
        self.logging_config = self.generate_logging_config()

    def create_log_directories(self):
        """
        Ensures that the necessary directories for each module are created.
        """
        # Create log directories for each module and log level
        for module in self.module_enum:
            for level in self.log_levels:
                log_dir = f"logs/{module.value}/{level}"
                os.makedirs(log_dir, exist_ok=True)

    def generate_logging_config(self):
        """
        Generates the dynamic logging configuration.
        :return: A dictionary representing the complete logging configuration.
        """
        handlers = self._create_handlers()
        loggers = self._create_loggers(handlers)

        return {
            "version": 1,
            "disable_existing_loggers": False,
            "formatters": self._get_formatters(),
            "handlers": handlers,
            "loggers": loggers,
        }

    def _create_handlers(self):
        """
        Creates logging handlers for each module (debug, info, warning, error).
        :return: A dictionary of handlers.
        """
        handlers = {}
        # Create handlers for each module
        for module in self.module_enum:
            module_str = module.value
            for level in self.log_levels:
                handlers[f"{module_str}_{level}_file"] = {
                    "level": level.upper(),
                    "class": "logging.FileHandler",
                    "filename": f"logs/{module_str}/{level}/{date.today()}_{module_str}_{level}.log",
                    "formatter": "json",
                }

        # Add console handler for real-time logging
        handlers["console"] = {
            "class": "logging.StreamHandler",
            "formatter": "json",
<<<<<<< Updated upstream
        },
        "db_query_file": {
            "level": "DEBUG",
            "class": "logging.FileHandler",
            "formatter": "custom_format_with_counter",
            "filename": f"logs/db_query/{date.today()}_debug.log",
        },
    },
    "loggers": {
        "": {
            "handlers": LOGGER_HANDLERS,
            "level": "DEBUG",
            "propagate": False,
        },
        "django.db.backends": {
            "handlers": ["db_query_file"],
            "level": "DEBUG",
            "propagate": False,
        },
    },
}
=======
        }

        return handlers

    def _create_loggers(self, handlers):
        """
        Creates loggers for each module and adds the necessary handlers.
        :param handlers: The handlers dictionary created in _create_handlers().
        :return: A dictionary of loggers.
        """
        loggers = {
            "": {
                "handlers": ["console"]
                + [f"{module.value}_debug_file" for module in self.module_enum]
                + [f"{module.value}_info_file" for module in self.module_enum],
                "level": "DEBUG",
                "propagate": False,
            }
        }

        for module in self.module_enum:
            module_str = module.value
            loggers[module_str] = {
                "handlers": [
                    f"{module_str}_{level}_file"
                    for level in ["debug", "info", "warning", "error"]
                ],
                "level": "DEBUG",
                "propagate": False,
            }

        return loggers

    def _get_formatters(self):
        """
        Returns a dictionary of formatters.
        :return: A dictionary with formatters for the logs.
        """
        return {
            "json": {
                "()": CustomizedJSONFormatter,  # Replace with your actual formatter class
            },
            "app": {
                "()": ExtraFormatter,  # Replace with your actual formatter class
                "format": 'level: "%(levelname)s"\t msg: "%(message)s"\t logger: "%(name)s"\t func: "%(funcName)s"\t time: "%(asctime)s"',
                "datefmt": "%Y-%m-%dT%H:%M:%S.%z",
                "extra_fmt": "\t extra: %s",
            },
        }

    def get_logging_config(self):
        """
        Returns the full logging configuration dictionary.
        :return: A dictionary representing the complete logging configuration.
        """
        return self.logging_config

# Example Usage
logging_service = LoggingService(modules=Module,log_levels=["debug", "info", "warning", "error"])

# Retrieve the logging configuration
logging_config = logging_service.get_logging_config()

LOGGING = logging_config
print(logging_config)

# Configure logging using the generated config
logging.config.dictConfig(logging_config)

logger = logging.getLogger("xxxxxxxyyyzz") 

log = AttributeLogger(logger)


log.info("test in user module")
>>>>>>> Stashed changes
