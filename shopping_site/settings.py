"""
Django settings for shopping_site project.

Generated by 'django-admin startproject' using Django 5.1.3.

For more information on this file, see
https://docs.djangoproject.com/en/5.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.1/ref/settings/
"""

from pathlib import Path
import os
import glob
from dotenv import load_dotenv
from datetime import date, timedelta
from shopping_site.infrastructure.logger.services import (
    CounterLogFormatter,
    CustomizedJSONFormatter,
)
from logging_utilities.formatters.extra_formatter import ExtraFormatter
import logging
import logging.config


load_dotenv()


# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent
interface_templates_dir = os.path.join(BASE_DIR, "shopping_site", "interface")
template_dirs = glob.glob(
    os.path.join(interface_templates_dir, "**", "templates"), recursive=True
)

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!

SECRET_KEY = "django-insecure-7e-^$ydu##sdoju#3_pgxuj!zevw6y31nt*v750^4x_)m6luyt"

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = bool(int(os.getenv("DEBUG", 0)))

DEBUG = True
ALLOWED_HOSTS = os.getenv("ALLOWED_HOSTS").split(",")

# Application definition

SYSTEM_APPS = [
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",
]

USER_APPS = [
    "shopping_site.domain.authentication",
    "shopping_site.domain.cart_item",
    "shopping_site.domain.order",
    "shopping_site.domain.product"
]

THIRD_PARTY_APPS = [
    "rest_framework",
    "drf_yasg",
    "widget_tweaks",
]

INSTALLED_APPS = SYSTEM_APPS + USER_APPS + THIRD_PARTY_APPS


MIDDLEWARE = [
    "django.middleware.security.SecurityMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
]
# if DEBUG:
#     MIDDLEWARE.append('shopping_site.infrastructure.middleware.SqlLoggerMiddleware')


ROOT_URLCONF = "shopping_site.urls"

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [BASE_DIR, *template_dirs],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.debug",
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
            ],
        },
    },
]

WSGI_APPLICATION = "shopping_site.drivers.wsgi.application"


# Database
# https://docs.djangoproject.com/en/5.1/ref/settings/#databases

DATABASES = {
    "default": {
        "ENGINE": "django.db.backends.postgresql",
        "NAME": os.getenv("DB_NAME"),
        "USER": os.getenv("DB_USER"),
        "PASSWORD": os.getenv("DB_PASSWORD"),
        "HOST": os.getenv("DB_HOST"),
        "PORT": os.getenv("DB_PORT"),
    }
}

AUTH_USER_MODEL = "authentication.User"
# Password validation
# https://docs.djangoproject.com/en/5.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.CommonPasswordValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.NumericPasswordValidator",
    },
]

# Internationalization
# https://docs.djangoproject.com/en/5.1/topics/i18n/

LANGUAGE_CODE = "en-us"

TIME_ZONE = "UTC"

USE_I18N = True

USE_TZ = True

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.1/howto/static-files/

STATIC_URL = "static/"

# Default primary key field type
# https://docs.djangoproject.com/en/5.1/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"

EMAIL_BACKEND = os.getenv("EMAIL_BACKEND")
EMAIL_HOST = os.getenv("EMAIL_HOST")
EMAIL_PORT = os.getenv("EMAIL_PORT")
EMAIL_USE_TLS = os.getenv("EMAIL_USE_TLS")
EMAIL_HOST_USER = os.getenv("EMAIL_HOST_USER")
EMAIL_HOST_PASSWORD = os.getenv("EMAIL_HOST_PASSWORD")


from datetime import date, timedelta

log_base_dir = "logs"

# Define the subdirectories where logs will be stored
log_subdirs = ["debug", "info", "warning", "error", "db_query"]

# Create the log directories if they don't exist
for subdir in log_subdirs:
    log_path = os.path.join(log_base_dir, subdir)
    os.makedirs(log_path, exist_ok=True)


LOGGER_HANDLERS = os.getenv(
    "LOGGER_HANDLERS",
    ["debug_file", "info_file", "warn_file", "error_file", "console"],
).split(",")

LOGGING = {
    "version": 1,
    "disable_existing_loggers": False,
    "formatters": {
        "json": {
            "()": CustomizedJSONFormatter,
        },
        "app": {
            "()": ExtraFormatter,
            "format": 'level: "%(levelname)s"\t msg: "%(message)s"\t logger: "%(name)s"\t func: "%(funcName)s"\t time: "%(asctime)s"',
            "datefmt": "%Y-%m-%dT%H:%M:%S.%z",
            "extra_fmt": "\t extra: %s",
        },
        "simple_string": {
            "format": "%(levelname)s %(asctime)s %(message)s\n",
            "datefmt": "%Y-%m-%dT%H:%M:%S.%z",
        },
        "custom_format_with_counter": {
            "()": CounterLogFormatter,
        },
    },
    "handlers": {
        "debug_file": {
            "level": "DEBUG",
            "class": "logging.FileHandler",
            "filename": f"logs/debug/{date.today()}_logger.log",
            "formatter": "json",
        },
        "info_file": {
            "level": "INFO",
            "class": "logging.FileHandler",
            "filename": f"logs/info/{date.today()}_info.log",
            "formatter": "json",
        },
        "warn_file": {
            "level": "WARNING",
            "class": "logging.FileHandler",
            "filename": f"logs/warning/{date.today()}_warn.log",
            "formatter": "json",
        },
        "error_file": {
            "level": "ERROR",
            "class": "logging.FileHandler",
            "filename": f"logs/error/{date.today()}_error.log",
            "formatter": "json",
        },
        "console": {
            "class": "logging.StreamHandler",
            "formatter": "json",
        },
        "db_query_file": {
            "level": "DEBUG",
            "class": "logging.FileHandler",
            "formatter": "custom_format_with_counter",
            "filename": f"logs/db_query/{date.today()}_debug.log",
        },
    },
    "loggers": {
        "": {
            "handlers": LOGGER_HANDLERS,
            "level": "DEBUG",
            "propagate": False,
        },
        "django.db.backends": {
            "handlers": ["db_query_file"],
            "level": "DEBUG",
            "propagate": False,
        },
    },
}




# LOG_DIR = "logs"
# os.makedirs(LOG_DIR, exist_ok=True)



# LOGGER_HANDLERS = os.getenv(
#     "LOGGER_HANDLERS", 
#     "debug_file,info_file,warning_file,error_file,console"
# ).split(",")

# MODULES = ["authentication", "order", "product", "cart_item"]


# def get_module_handlers(module_name):
#     log_dir = f"logs/{module_name}"
#     os.makedirs(f"{log_dir}/debug", exist_ok=True)
#     os.makedirs(f"{log_dir}/info", exist_ok=True)
#     os.makedirs(f"{log_dir}/warning", exist_ok=True)
#     os.makedirs(f"{log_dir}/error", exist_ok=True)

#     return {
#         f"{module_name}_debug_file": {
#             "level": "DEBUG",
#             "class": "logging.FileHandler",
#             "filename": f"{log_dir}/debug/{date.today()}_{module_name}_debug.log",
#             "formatter": "json", 
#         },
#         f"{module_name}_info_file": {
#             "level": "INFO",
#             "class": "logging.FileHandler",
#             "filename": f"{log_dir}/info/{date.today()}_{module_name}_info.log",
#             "formatter": "json",
#         },
#         f"{module_name}_warn_file": {
#             "level": "WARNING",
#             "class": "logging.FileHandler",
#             "filename": f"{log_dir}/warning/{date.today()}_{module_name}_warn.log",
#             "formatter": "json",
#         },
#         f"{module_name}_error_file": {
#             "level": "ERROR",
#             "class": "logging.FileHandler",
#             "filename": f"{log_dir}/error/{date.today()}_{module_name}_error.log",
#             "formatter": "json",
#         },
#         f"{module_name}_console": {
#             "class": "logging.StreamHandler",
#             "formatter": "json", 
#         },
#     }


# loggers = {}


# handlers = {}


# for module in MODULES:
#     handlers.update(get_module_handlers(module))




# formatters = {
#     "json": {
#         "()": CustomizedJSONFormatter, 
#     },
#     "app": {
#         "()": ExtraFormatter,  
#         "format": 'level: "%(levelname)s"\t msg: "%(message)s"\t logger: "%(name)s"\t func: "%(funcName)s"\t time: "%(asctime)s"',
#         "datefmt": "%Y-%m-%dT%H:%M:%S.%z",
#         "extra_fmt": "\t extra: %s",
#     },
#     "simple_string": {
#         "format": "%(levelname)s %(asctime)s %(message)s\n",
#         "datefmt": "%Y-%m-%dT%H:%M:%S.%z",
#     },
#     "custom_format_with_counter": {
#         "()": CounterLogFormatter, 
#     },
  
# }

# for module in MODULES:
#     loggers[module] = {
#         "handlers": [
#             f"{module}_debug_file",
#             f"{module}_info_file",
#             f"{module}_warn_file",
#             f"{module}_error_file",
#             f"{module}_console"
#         ],
#         "level": "DEBUG",  
#         "propagate": False,
#     }

# LOGGING = {
#     "version": 1,
#     "disable_existing_loggers": False,
#     "formatters": formatters,
#     "handlers": handlers,
#     "loggers": loggers,
# }

# logging.config.dictConfig(LOGGING)






